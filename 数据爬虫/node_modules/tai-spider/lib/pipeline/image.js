'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var crypto = require('crypto');
var fs = require('fs');
var path = require('path');
var Image = require('../types/image');

var ImageWriterPipeline = function () {
	function ImageWriterPipeline() {
		_classCallCheck(this, ImageWriterPipeline);
	}

	_createClass(ImageWriterPipeline, [{
		key: 'open_spider',
		value: function open_spider(spider) {
			this.outputDir = spider.envs['IMAGES_STORE'];
			if (this.outputDir) {
				try {
					fs.mkdirSync(this.outputDir);
				} catch (error) {/* eslint-disable no-empty */}
			}
		}
	}, {
		key: 'process_item',
		value: function process_item(item, /* eslint-disable no-unused-vars */spider) {
			var hash = function hash(str) {
				var hashFn = crypto.createHash('md5');
				hashFn.update(str);
				return hashFn.digest('hex');
			};

			if (item instanceof Image) {
				var filename = item.filename || hash(item.url) + '.' + item.type;
				fs.createWriteStream(path.join(this.outputDir, filename)).write(item.body);
			}
			return item;
		}
	}]);

	return ImageWriterPipeline;
}();

module.exports = ImageWriterPipeline;